SQL for PostgreSQL (which Neon uses)

CREATE TABLE user_credits (
    -- Internal Database ID (Optional but good practice)
    id SERIAL PRIMARY KEY,

    -- Clerk User ID: The crucial link to your authentication system
    -- TEXT is generally preferred over VARCHAR for unlimited length strings in Postgres
    -- UNIQUE constraint ensures one record per Clerk user
    -- NOT NULL because every credit record MUST belong to a user
    clerk_user_id TEXT UNIQUE NOT NULL,

    -- The actual credit balance for the user
    -- INTEGER is suitable for whole credits
    -- NOT NULL because the balance must exist
    -- DEFAULT sets the initial credits for new users (adjust '10' as needed)
    -- CHECK constraint prevents negative credits, ensuring data integrity
    credits INTEGER NOT NULL DEFAULT 10 CHECK (credits >= 0),

    -- Timestamps (Good practice for tracking)
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- === Indexes ===
-- An index on clerk_user_id is essential for performance.
-- The UNIQUE constraint above often creates an index automatically,
-- but explicitly creating it doesn't hurt and makes the intent clear.
CREATE INDEX idx_user_credits_clerk_user_id ON user_credits(clerk_user_id);


-- === Optional but Recommended: Auto-update 'updated_at' timestamp ===
-- This function and trigger will automatically update the updated_at column
-- whenever a row in user_credits is modified.

CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON user_credits
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();